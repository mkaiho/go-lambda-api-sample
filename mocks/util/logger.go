// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	util "github.com/mkaiho/go-lambda-api-sample/util"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Debug(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: err, msg, keysAndValues
func (_m *Logger) Error(err error, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: err, msg, keysAndValues
func (_m *Logger) Fatal(err error, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) Info(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// WithValues provides a mock function with given fields: keysAndValues
func (_m *Logger) WithValues(keysAndValues ...interface{}) util.Logger {
	var _ca []interface{}
	_ca = append(_ca, keysAndValues...)
	ret := _m.Called(_ca...)

	var r0 util.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) util.Logger); ok {
		r0 = rf(keysAndValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.Logger)
		}
	}

	return r0
}
